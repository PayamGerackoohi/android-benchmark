name: Main branch CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.app-version.outputs.version }}
      isNewTag: ${{ steps.check-version.outputs.isNewTag }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract the app version
        id: app-version
        run: >
          mkdir -p build;
          cat buildSrc/src/main/kotlin/Versions.kt |
          grep appVersionName |
          head -1 |
          cut -f2 -d = |
          cut -f2 -d \" >
          build/Version.txt;
          version=`cat build/Version.txt`;
          echo "version=$version" >> "$GITHUB_OUTPUT";

      - name: Check if it's a new release version
        id: check-version
        run: |
          tag=`gh release list | grep -w $version || :`
          if [[ -z "$tag" ]]; then
            echo "isNewTag=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          version: ${{ steps.app-version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-test-archive:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.isNewTag

    steps:
      - uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decrypt the keystore
        run: ./scripts/decrypt-secrets.sh
        env:
          GPG_KEYSTORE_PASSPHRASE: ${{ secrets.GPG_KEYSTORE_PASSPHRASE }}

      - name: Build with Gradle
        run: ./gradlew assembleRelease

      - name: Test
        run: ./gradlew koverHtmlReportRelease
      #  run: ./gradlew testReleaseUnitTest

      - name: Gather the archive files
        id: app
        run: |
          set -e

          rm -rf archive
          mkdir -p archive/app
          mkdir -p archive/test-results/unit-tests
          mkdir -p archive/test-results/kover-report

          mv app/build/outputs/apk/release/*.apk archive/app
          mv app/build/reports/tests/testReleaseUnitTest/* archive/test-results/unit-tests
          mv app/build/reports/kover/htmlRelease/* archive/test-results/kover-report

          pushd archive
            pushd app
              appName=`ls | head -1 | rev | cut -c 5- | rev`
            popd
            tar -czf test-results.tgz -C test-results .
          popd
          echo "name=${appName}" >> "$GITHUB_OUTPUT";

      - name: Archive the app
        uses: actions/upload-artifact@v3
        with:
          name: Android Benchmark App
          path: archive/app/${{ steps.app.outputs.name }}.apk

      - name: Archive the test results
        uses: actions/upload-artifact@v3
        with:
          name: Test Results
          path: archive/test-results.tgz

  deploy:
    runs-on: ubuntu-latest
    needs:
      - check-version
      - build-test-archive
    env:
      version: ${{ needs.check-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Download the artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Make release
        run: >
          gh release create $version
          dist/**/*
          --generate-notes
          --title "Android Benchmark - v$version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
